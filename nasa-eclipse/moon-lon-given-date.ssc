include("nakshatras.inc");
// MOON_PHASES
include("moon-phases-js-array.inc");
// MOON_PHASES = [['-01999-01-07T00:24:00',0.0,'-'],
// ['-01999-01-15T05:26:00',0.0,'-'],
// ['-01999-01-22T21:51:00',0.5,'-'],
// ['-01999-01-29T13:17:00',1.0,'-'],
//  dt,                   phase, gruhanam

var tk = new TimeKeeper()
var tk2 = new TimeKeeper()
core.setObserverLocation(0,45,0,"GMT-ish")

// say(DT()) ; say(JD())

//samples - fetched from pythin script - goal is to compute sjd column
say("num_moons = " + MOON_PHASES.length)
full_moons = MOON_PHASES.filter( function(x,i) { return x[1]> 0.55} )
num_full_moons = full_moons.length
say("num_full_moons = " + num_full_moons)

LAST_MARK = 10420
LAST_MARK = 11087
full_moons.forEach ( function(x,i)  {
	if ( i <= LAST_MARK) return
	if ( i % ( 
		i<(LAST_MARK+100) ? 10  
		: i<(LAST_MARK+1001) ? 100 
		: 1000 ) == 0 ) {
		pct = (i/num_full_moons)*100
   	 	core.output(
			pct.toFixed(2) + "% , " 
			+ i + " of " + num_full_moons 
			+ " : " + tk.secElapsed() 
			+ " : " + tk2.secElapsed() 
			+ " seconds "
			+ x[0]
		)	
    		tk2 = new TimeKeeper()
	}
	adt = x[0] 
        ph = x[1]
	gr = x[2]
	DT(adt) ; W(.1)
	// DT("-310.33 minutes"); W(.3)
	sdt = DT(); W(.05)
	sjd = JD(); W(.05)
	moon = getOI("moon"); W(.1)
	// say( [ 'adt', adt ].join(' --- ' ))
	// say( [ 'sdt' , sdt ].join(' --- ' ))
	// say(".- - - - - - - - - - - - - - -")
	// say( [ 'ajd', ajd ].join(' --- ' ))
	// say( [ 'sjd' , sjd ].join(' --- ' ))
	// say("==================")
        retval = [
		adt, sdt, 
		sjd.toFixed(2), 
		// '**Lon Lat***',
		moon.elong.toFixed(1), moon.elat.toFixed(1),
		// '**RA Dec***',
		moon.ra.toFixed(1), moon.dec.toFixed(1), 
		// '**Ph Illu***',
		moon.phase.toFixed(1), moon.illumination.toFixed(1),
		ph, gr
	]
	say(retval.join("\t"))
	// ddump(retval,1)
	return retval
})

ddump(ans)

// function slope( x1,y1,x2,y2) { return (y2-y1)/(x2-x1) }
// function intercept( x1,y1,x2,y2) { return y1-slope(x1,y1,x2,y2)*x1 }
